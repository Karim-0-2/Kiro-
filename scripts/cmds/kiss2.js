const fs = require("fs-extra");
const path = require("path");
const axios = require("axios");
const jimp = require("jimp");

module.exports = {
  config: {
    name: "kiss",
    version: "2.1.0",
    author: "ùêáùêöùê¨ùê¢ùêõ",
    countDown: 5,
    role: 0,
    shortDescription: "Kiss the person you tag or reply",
    longDescription: "Send a kiss frame with you and the person you tag or reply to",
    category: "love",
    guide: {
      en: "{pn} @mention\n{pn} (by replying to a message)"
    }
  },

  // === LOAD BACKGROUND IMAGE ===
  onLoad: async () => {
    const dir = path.join(__dirname, "cache");
    const filePath = path.join(dir, "kiss.png");
    if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
    if (!fs.existsSync(filePath)) {
      const imgURL = "https://i.imgur.com/j96ooUs.jpeg";
      const imgData = (await axios.get(imgURL, { responseType: "arraybuffer" })).data;
      fs.writeFileSync(filePath, Buffer.from(imgData));
    }
  },

  // === MAKE IMAGE ===
  makeImage: async function ({ one, two }) {
    const dir = path.join(__dirname, "cache");
    const bg = await jimp.read(path.join(dir, "kiss.png"));
    const pathImg = path.join(dir, `kiss_${one}_${two}.png`);
    const avatarOnePath = path.join(dir, `avt_${one}.png`);
    const avatarTwoPath = path.join(dir, `avt_${two}.png`);

    const getAvatar = async (uid, filePath) => {
      const url = `https://graph.facebook.com/${uid}/picture?width=512&height=512&access_token=6628568379|c1e620fa708a1d5696fb991c1bde5662`;
      const avatarData = (await axios.get(url, { responseType: "arraybuffer" })).data;
      fs.writeFileSync(filePath, Buffer.from(avatarData));
    };

    await getAvatar(one, avatarOnePath);
    await getAvatar(two, avatarTwoPath);

    const circle = async (imagePath) => {
      const img = await jimp.read(imagePath);
      img.circle();
      return await img.getBufferAsync("image/png");
    };

    const circleOne = await jimp.read(await circle(avatarOnePath));
    const circleTwo = await jimp.read(await circle(avatarTwoPath));

    // Place avatars
    bg.resize(700, 440)
      .composite(circleOne.resize(150, 150), 390, 23)
      .composite(circleTwo.resize(150, 150), 115, 130);

    const finalBuffer = await bg.getBufferAsync("image/png");
    fs.writeFileSync(pathImg, finalBuffer);

    fs.unlinkSync(avatarOnePath);
    fs.unlinkSync(avatarTwoPath);

    return pathImg;
  },

  // === MAIN COMMAND ===
  onStart: async function ({ event, api }) {
    const { threadID, messageID, senderID, mentions, type, messageReply } = event;
    const mention = Object.keys(mentions);

    let one = senderID;
    let two;

    if (mention[0]) {
      two = mention[0]; // case: user mentioned someone
    } else if (type === "message_reply") {
      two = messageReply.senderID; // case: user replied to someone's message
    }

    if (!two) {
      return api.sendMessage("‚ö†Ô∏è Please tag or reply to someone!", threadID, messageID);
    }

    const captions = [
      "‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶Ö‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶ï‡¶∞‡ßá, ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶Ø‡¶º‡¶æ‡¶§‡ßá ‡¶ú‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡¶™‡¶°‡¶º‡¶õ‡¶ø ‡¶Ü‡¶Æ‡¶ø ‡¶¨‡¶æ‡¶∞‡ßá‡¶¨‡¶æ‡¶∞!üå∑",
      "‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶ï‡ßá‡¶® ‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶ø ‡¶§‡¶æ‡¶∞ ‡¶ï‡ßã‡¶® ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶æ‡¶®‡¶æ ‡¶®‡¶æ‡¶á! ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶∏‡¶æ‡¶∞‡¶æ‡¶ú‡ßÄ‡¶¨‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶π‡¶æ‡¶ú‡¶æ‡¶∞‡¶ü‡¶æ ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶Ü‡¶õ‡ßá!üíö",
      "‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶æ‡¶ü‡¶æ‡¶®‡ßã ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶ï‡¶•‡¶æ ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶Æ‡¶®‡ßá ‡¶π‡¶Ø‡¶º, ‡¶è‡¶á ‡¶è‡¶ï ‡¶ú‡¶®‡¶Æ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶ï‡¶Æ ‡¶∏‡¶Æ‡¶Ø‡¶º!üòò",
      "‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ú‡ßÄ‡¶¨‡¶®‡ßá‡¶∞ ‡¶∏‡ßá‡¶á ‡¶ó‡¶≤‡ßç‡¶™ ‡¶π‡¶¨‡ßá? ‡¶Ø‡ßá‡¶á ‡¶ó‡¶≤‡ßç‡¶™‡ßá‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶ï‡ßã‡¶®‡ßã ‡¶∂‡ßá‡¶∑ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá ‡¶®‡¶æ!‚ô•Ô∏è",
      "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶™‡¶æ‡¶∂‡ßá ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ‡¶Æ‡¶®‡ßá ‡¶π‡ßü, ‡¶ú‡ßÄ‡¶¨‡¶® ‡¶Ø‡ßá‡¶® ‡¶è‡¶ï‡¶ü‡¶æ ‡¶Æ‡¶ß‡ßÅ‡¶∞ ‡¶ï‡¶¨‡¶ø‡¶§‡¶æ‡ßü ‡¶∞‡ßÇ‡¶™ ‡¶®‡ßá‡ßü!üòç",
      "‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶õ‡¶æ‡ßú‡¶æ ‡¶ú‡ßÄ‡¶¨‡¶®‡¶ü‡¶æ ‡¶Ö‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£, ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶§‡¶æ!üß°",
      "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡ßç‡¶¨‡¶™‡ßç‡¶®, ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ú‡ßÄ‡¶¨‡¶®‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§!üåª",
      "‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ö‡ßã‡¶ñ‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶Ö‡¶∏‡ßç‡¶•‡¶ø‡¶§‡ßç‡¶¨ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶§‡ßá ‡¶è‡¶∏‡ßã‡¶®‡¶æ, ‡¶π‡¶æ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá! ‡¶ï‡ßá‡¶®‡¶®‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßÅ‡¶∞‡ßã‡¶ü‡¶æ-‡¶ú‡ßÅ‡¶∞‡ßá‡¶á ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞‡¶á ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ï ‡¶Ü‡¶®‡¶æ‡¶ó‡ßã‡¶®‡¶æ!üå∫",
      "‡¶§‡ßã‡¶Æ‡¶æ‡¶§‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶§‡ßã‡¶Æ‡¶æ‡¶§‡ßá‡¶á ‡¶∂‡ßá‡¶∑, ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ó‡¶≤‡ßç‡¶™ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá‡¶á ‡¶∂‡ßá‡¶∑!üòò",
      "‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶æ ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶Ö‡¶®‡ßÅ‡¶≠‡ßÇ‡¶§‡¶ø ‡¶π‡¶Ø‡¶º, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶≠‡ßÇ‡¶§‡¶ø ‡¶™‡ßÉ‡¶•‡¶ø‡¶¨‡ßÄ‡¶∞ ‡¶∏‡ßá‡¶∞‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶≠‡ßÇ‡¶§‡¶ø‡•§üåª·É¶üå∫"
    ];

    const caption = captions[Math.floor(Math.random() * captions.length)];

    try {
      const imagePath = await this.makeImage({ one, two });
      return api.sendMessage({
        body: caption,
        attachment: fs.createReadStream(imagePath)
      }, threadID, () => fs.unlinkSync(imagePath), messageID);
    } catch (e) {
      console.error(e);
      return api.sendMessage("‚ùå ‡¶õ‡¶¨‡¶ø‡¶ü‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!", threadID, messageID);
    }
  }
};
