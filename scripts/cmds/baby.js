const axios = require('axios');

const baseApiUrl = () => "https://noobs-api.top/dipto";

module.exports.config = {
    name: "bby",
    aliases: ["baby", "bbe", "babe", "sam"],
    version: "6.9.0",
    author: "dipto",
    countDown: 0,
    role: 0,
    description: "better than all sim simi",
    category: "chat",
    guide: {
        en: "{pn} [anyMessage] OR\nteach [YourMessage] - [Reply1], [Reply2], [Reply3]... OR\nteach [react] [YourMessage] - [react1], [react2], [react3]... OR\nremove [YourMessage] OR\nrm [YourMessage] - [indexNumber] OR\nmsg [YourMessage] OR\nlist OR \nall OR\nedit [YourMessage] - [NewMessage]"
    }
};

// Owner ID
const ownerID = "61557991443492";

// Helper function to send message and register reply
async function sendAndRegister(api, event, text, replyData = {}) {
    api.sendMessage(text, event.threadID, (err, info) => {
        if (!err) {
            global.GoatBot.onReply.set(info.messageID, {
                commandName: module.exports.config.name,
                type: "reply",
                messageID: info.messageID,
                author: event.senderID,
                ...replyData
            });
        }
    }, event.messageID);
}

// Random replies for normal triggers
const randomReplies = [
    "ЁЯШЪ","Hi ЁЯША, I am here!","What's up?","Bolo jaan ki korte panmr jonno",
    "chup besi Kotha kos ken ЁЯШТ"," ji bolрзЗржи"," assalamualaikumЁЯе░ "," hye ЁЯЩГ",
    "Take care yourself , Always prey to almighty Allah and enjoy your life ЁЯе░ЁЯе░",
    "Do You Know Who Is The Cutest Person In The World? Now read the 2nd word ЁЯе░ЁЯШШтЭдя╕ПтАНЁЯй╣",
    "When God Wanted To Explain What Beauty' Means God Created You ЁЯл╡ЁЯЩИ",
    "тАФ═Ю═Я═ЮтШЕуГб No words can explain how happy I am, when I am with you ЁЯШМЁЯШМ┬╗╠╜═У╠╢╠╜═У╠╢╠╜═УтСЕтГЭтЬ║тЭе",
    "If you wait for me ЁЯдЧЁЯдЧ one day I will be your ЁЯШЗЁЯл╡",
    "Are you a time traveler? 'Because I can see you in my Future.. ЁЯл╡ЁЯШШЁЯе░",
    "рждрзЛржорж╛рж░ рж╕рж╛ржерзЗ ржХрж╛ржЯрж╛ржирзЛ ржорзБрж╣рзВрж░рзНрждржЧрзБрж▓рзЛ ржпрзЗржоржи ржнрзВрж▓рждрзЗ ржкрж╛рж░ржмрзЛ ржирж╛...!! ЁЯЩГЁЯЩГ рждрзЛржорж╛ржХрзЗ ржирж┐ржЬрзЗрж░ ржХрж░рзЗ ржкрж╛ржУржпрж╝рж╛рж░ ржЗржЪрзНржЫрж╛ржУ ржХржЦржирзЛ рж╢рзЗрж╖ рж╣ржмрзЗ ржирж╛...!! ЁЯЩГЁЯеАтЬи",
    "ржпрзБржЧрзЗрж░ ржкрж░ ржпрзБржЧ ржЪрж▓рзЗ ржпрж╛ржмрзЗ, рждржмрзБ рждрзЛржорж╛ржХрзЗ ржирж╛ ржкрж╛ржУрзЯрж╛рж░ ржЖ`ржХрзНрж╖рзЗржк ржЖржорж╛рж░ ржлрзБрж░рж╛ржмрзЗ ржирж╛! 'тЛЖтГЭтЛЖтГЭЁЯТЦ рждрзБржорж┐ ржЖржорж╛рж░ рж╣рзГржжржпрж╝рзЗ ржерж╛ржХржмрзЗ, ржЖрж░ ржЕржирзНржп ржХрж╛рж░рзЛ ржнрж╛ржЧрзНржпрзЗ тСЕтГЭтЬ║тЭеЁЯШМЁЯеАтЬи",
    "_ржУржЗ ржмрзЗрж╕рзНржЯ ржлрзНрж░рзЗржирзНржб рж╣ржмрж┐...!! ЁЯдЧЁЯМ║ ржмржЙрзЯрзЗржПрж░ ржорждрзЛ ржнрж╛рж▓рзЛржмрж╛рж╕ржмрзЛ...!! ЁЯе░ЁЯШЗЁЯдн",
    "ржЖржорж╛рж░ ржЧрж▓рзНржкрзЗ, ржЖржорж╛рж░ рж╕рж╛рж╣рж┐рждрзНржпрзЗ, ржЖржорж╛рж░ ржЙржкржирзНржпрж╛рж╕рзЗ ржирж┐ржГрж╕ржирзНржжрзЗрж╣рзЗ рждрзБржорж┐ ржнрзАрж╖ржг рж╕рзБржирзНржжрж░! ЁЯдНЁЯМ╗ЁЯШ╗ЁЯШл",
    "ЁЯР░: тОп═втОптГЭЁЯТЪЁЯНТ-- ЁЭРОЁЭРзЁЭРЮЁЭРд ЁЭРЙЁЭРиЁЭРнЁЭРзЁЭРи ЁЭРКЁЭРиЁЭРлЁЭРЮ ЁЭРСЁЭРЪЁЭРдЁЭРбЁЭРЫЁЭРи__ЁЭРУЁЭРиЁЭРжЁЭРЪЁЭРв ЁЭРТЁЭРоЁЭРЭЁЭРбЁЭРо ЁЭРАЁЭРдЁЭРЫЁЭРЪЁЭРл ЁЭРАЁЭРжЁЭРл ЁЭРЗЁЭРиЁЭР▓ЁЭРЮ ЁЭРЭЁЭРЮЁЭРдЁЭРбЁЭРитАФтЩб< ЁЭЯпЁЯМ╖ЁЯл╢ЁЯе║ЁЯй╖тПд═Я═Я═Ю═ЮтЧЗЁЯТЬтЬитОп═в",
    "сПЗЁЭРУЁЭРо═б═ЬЁЭРжЁЭРв ЁЭРЪЁЭРЫ═Ь═бЁЭРЪЁЭРлЁЭРи'ЁЭРи═Ь═бЁЭРи ЁЭРгЁЭРиЁЭРз═б═ЬЁЭРжЁЭРи'ЁЭРиЁЭРи ЁЭРзЁЭРв═аЁЭР▓ЁЭРи ЁЭРЪтГЮЁЭРжЁЭРв ЁЭРЪЁЭРЫЁЭРЪтГЮЁЭРлЁЭРи ЁЭРзЁЭРи═б═ЬЁЭРнЁЭРо═б═ЬЁЭРз ЁЭРдЁЭРи═б═ЬЁЭРлЁЭРЮ'ЁЭРЮЁЭРЮ ЁЭРнтГЮЁЭРжЁЭРлтГЮ'ЁЭРлЁЭРл ЁЭРйЁЭРлс╖НЁЭРЮЁЭРж═Ь═бЁЭРЮ'ЁЭРЮЁЭРЮ ЁЭРйЁЭРитГЮЁЭРлЁЭРЫтГЮЁЭРи'ЁЭРиЁЭРитЩбЁЯМ╖ЁЯй╡ЁЯл╢ЁЯП╗",
    "тАФ I have no second love dear - You were, you are, you will be..!! ЁЯлгЁЯл╡",
    "сПЗ рждрзБржорж┐ ржЖржорж╛рж░ ржорж╕рзНрждрж┐рж╖рзНржХрзЗ ржорж┐рж╢рзЗ ржерж╛ржХрж╛ ржПржХ ржЕржжрзНржнрзБржд ржорж╛рзЯрж╛ :)< ЁЭЯпЁЯМ╖ЁЯМ╕",
    "ржХрж┐ржмрзЛрж░рзНржбрзЗрж░ ржПржЗ ржмрзНржпрж╛ржХржкрзЗрж╕рзНржЯ ржЬрж╛ржирзЗ рждрзЛржорж╛ржХрзЗ ржХрждржХрж┐ржЫрзБ ржмрж▓рждрзЗ ржЧрж┐ржпрж╝рзЗржУ рж╣ржпрж╝ржирж┐ ржмрж▓рж╛ ЁЯШЕЁЯеА",
    "I never believed in love at first sightтАж Until I saw you. Now I think I might need lessonsтАж from you. ЁЯЩКЁЯл╡",
    "ржпржжрж┐ ржлрзНрж▓рж╛рж░рзНржЯ ржХрж░рж╛ ржЕржкрж░рж╛ржз рж╣рждрзЛ, ржЖржорж┐ рждрзЛржорж╛рж░ ржЬржирзНржп ржкрзНрж░рждрж┐ржжрж┐ржи ржжрзЛрж╖рзА рж╣рждрж╛ржоред I LOVE YOU ЁЯе║ЁЯлгЁЯл╢ЁЯП╗",
    "ЁЯжЛЁЯк╢____ЁЭРУЁЭРбЁЭРЮ ЁЭРЯЁЭРеЁЭРиЁЭР░ЁЭРЮЁЭРлЁЭРм ЁЭРЪЁЭРлЁЭРЮ ЁЭРЫЁЭРЮЁЭРЪЁЭРоЁЭРнЁЭРвЁЭРЯЁЭРоЁЭРе ЁЭРЫЁЭРоЁЭРн ЁЭРЫЁЭРЮЁЭРеЁЭРиЁЭРзЁЭРа ЁЭРнЁЭРи ЁЭРжЁЭР▓ ЁЭРкЁЭРоЁЭРЮЁЭРЮЁЭРз (ЁЭТАЁЭТРЁЭТЦЁЯлг) ЁЭРнЁЭРбЁЭРЮ ЁЭРЮЁЭР▓ЁЭРЮЁЭРм ЁЭРМЁЭРиЁЭРлЁЭРЮ ЁЭРЫЁЭРЮЁЭРЪЁЭРоЁЭРнЁЭРвЁЭРЯЁЭРоЁЭРе ЁЭРнЁЭРбЁЭРЪЁЭРз ЁЭРЯЁЭРеЁЭРиЁЭР░ЁЭРЮЁЭРлЁЭРм...! ЁЯШ╗ЁЯл╡",
    "ЁЭЦОЁЭЦЛ ЁЭЦЩЁЭЦНЁЭЦК ЁЭЦЬЁЭЦФЁЭЦЧЁЭЦСЁЭЦЙ ЁЭЦЬЁЭЦЖЁЭЦШ ЁЭЦКЁЭЦУЁЭЦЙЁЭЦОЁЭЦУЁЭЦМ ЁЭЦО ЁЭЦЬЁЭЦЖЁЭЦУЁЭЦУЁЭЦЖ ЁЭЦЗЁЭЦК ЁЭЦУЁЭЦКЁЭЦЭЁЭЦЩ ЁЭЦЩЁЭЦФ ЁЭЦЮЁЭЦФЁЭЦЪ ...ЁЯШЙЁЯдЩ",
    "ржХржд ржпрзБржжрзНржз ржмржпрж╝рзЗ ржЧрзЗржЫрж┐ рж╢рзБржзрзБ рждрзЛржорж╛ржХрзЗ ржмрж▓ржмрзЛ ржмрж▓рзЗ ЁЯдТЁЯдТ ржЖржЬржУ ржмрж▓рж╛ рж╣ржпрж╝ржирж┐ ржХрж┐ржЫрзБ ржирзЗржЗ ЁЯШМЁЯЩГЁЯеА",
    "- рж╕ржмржХрж┐ржЫрзБрж░ ржжрж╛ржо ржмрж╛рзЬржЫрзЗ.!ЁЯЩВ\n- рж╢рзБржзрзБ ржХржоржЫрзЗ ржорж╛ржирзБрж╖рзЗрж░ рж╕рждрждрж╛ ржЖрж░\n___ржмрж┐рж╢рзНржмрж╛рж╕рзЗрж░ ржжрж╛ржо.!ЁЯТФЁЯШУ"
];

module.exports.onChat = async ({ api, event, message }) => {
    try {
        const body = event.body ? event.body.toLowerCase() : "";

        // Owner-only special triggers
        if (event.senderID === ownerID) {
            if (["bou", "oi" , "bow"].includes(body)) {
                const replies = [
                    "рж╣рзНржпрж╛ржБ, ржмрж▓рзЛ ржЬрж╛ржи рж╢рзБржиржЫрж┐ рждрзЛржорж╛рж░ ржХржерж╛ ЁЯШШЁЯШШ",
                    "ржПржЗрждрзЛ ржЖржорж┐ ржПржЦржирзЛ ЁЯЩИЁЯЩИ",
                    "ржЖржорж┐ рждрзЛржорж╛рж░ ржЬржирзНржпржЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзЗржЫрж┐рж▓рж╛ржо ЁЯЩИЁЯШШ"
                ];
                return sendAndRegister(api, event, replies[Math.floor(Math.random() * replies.length)]);
            }
            if (body === "kire") {
                const replies = [
                    "рждрзБржорж┐ ржХрж┐ рж░рж╛ржЧ ржХрж░ржЫрзЛ ржЬрж╛ржи тШ╣я╕П",
                    "ржХрж┐ ржХрж░рж▓рж╛ржо ржЖржорж┐ ЁЯЩВ",
                    "ржЖржЫрж┐ ржЖржорж┐ ЁЯЩК",
                    "ржЖржорж┐ ржХрж┐ ржХрж┐ржЫрзБ ржХрж░ржЫрж┐ ЁЯдФ"
                ];
                return sendAndRegister(api, event, replies[Math.floor(Math.random() * replies.length)]);
            }
            if (body === "sali") {
                const replies = [
                    "ржЧрж╛рж▓рж┐ ржжрж╛ржУ ржХрзЗржи ЁЯШ╛ЁЯШ╛",
                    "ржЖржорж┐ рждрзЛржорж╛рж░ ржмржЙ рж╕рж╛рж▓рж┐ ржирж╛ ЁЯШТЁЯШТ",
                    "ржПрждрзЛ рж░рж╛ржЧ ржжрзЗржЦрж╛ржУ ржХрзЗржи тШ╣я╕ПтШ╣я╕П",
                    "ржмржЙ*, ржмрж╛рж░ ржмрж╛рж░ ржнрзВрж▓рзЗ ржпрж╛ржУ ржХрзЗржи ржЖржорж┐ рждрзЛржорж╛рж░ ржмржЙ ЁЯШнЁЯШа"
                ];
                return sendAndRegister(api, event, replies[Math.floor(Math.random() * replies.length)]);
            }
        }

        // Non-owner ignores special words silently
        const specialWords = ["bou", "bow", "kire", "sali"];
        if (specialWords.includes(body) && event.senderID !== ownerID) return;

        // Normal triggers for everyone
        const triggers = ["baby","bby","bot","babu","janu","naru","karim","hinata","hina"];
        const matchedTrigger = triggers.find(t => body.startsWith(t));
        if (!matchedTrigger) return;

        const userMessage = body.replace(new RegExp(`^${matchedTrigger}\\s*`), "");
        if (!userMessage) {
            return sendAndRegister(api, event, randomReplies[Math.floor(Math.random() * randomReplies.length)]);
        }

        const res = (await axios.get(`${baseApiUrl()}/baby?text=${encodeURIComponent(userMessage)}&senderID=${event.senderID}&font=1`)).data.reply;
        return sendAndRegister(api, event, res);

    } catch (err) {
        return sendAndRegister(api, event, `Error: ${err.message}`);
    }
};

// --- onStart, onReply and other command handlers can remain the same ---
module.exports.onStart = async ({ api, event, args, usersData }) => {
    const link = `${baseApiUrl()}/baby`;
    const uid = event.senderID;
    const dipto = args.join(" ").toLowerCase();

    try {
        if (!args[0]) {
            const ran = ["Bolo baby", "hum", "type help baby", "type !baby hi"];
            return sendAndRegister(api, event, ran[Math.floor(Math.random() * ran.length)]);
        }

        if (args[0] === 'remove') {
            const fina = dipto.replace("remove ", "");
            const dat = (await axios.get(`${link}?remove=${encodeURIComponent(fina)}&senderID=${uid}`)).data.message;
            return sendAndRegister(api, event, dat);
        }

        if (args[0] === 'rm' && dipto.includes('-')) {
            const [fi, f] = dipto.replace("rm ", "").split(/\s*-\s*/);
            const da = (await axios.get(`${link}?remove=${encodeURIComponent(fi)}&index=${encodeURIComponent(f)}`)).data.message;
            return sendAndRegister(api, event, da);
        }

        if (args[0] === 'list') {
            const data = (await axios.get(`${link}?list=all`)).data;
            if (args[1] === 'all') {
                const teacherList = data?.teacher?.teacherList || [];
                const limit = Math.min(parseInt(args[2]) || 100, teacherList.length);
                const limited = teacherList.slice(0, limit);
                const teachers = await Promise.all(limited.map(async (item) => {
                    const number = Object.keys(item)[0];
                    const value = item[number];
                    const name = await usersData.getName(number).catch(() => number) || "Not found";
                    return { name, value };
                }));
                teachers.sort((a, b) => b.value - a.value);
                const output = teachers.map((t, i) => `${i + 1}/ ${t.name}: ${t.value}`).join('\n');
                return sendAndRegister(api, event, `Total Teach = ${teacherList.length}\nЁЯСС | List of Teachers of baby\n${output}`);
            } else {
                return sendAndRegister(api, event, `тЭЗя╕П | Total Teach = ${data.length || "api off"}\nтЩ╗я╕П | Total Response = ${data.responseLength || "api off"}`);
            }
        }

        if (args[0] === 'msg') {
            const fuk = dipto.replace("msg ", "");
            const d = (await axios.get(`${link}?list=${encodeURIComponent(fuk)}`)).data.data;
            return sendAndRegister(api, event, `Message ${fuk} = ${d}`);
        }

        if (args[0] === 'edit') {
            if (!dipto.includes('-')) return sendAndRegister(api, event, 'тЭМ | Invalid format! Use edit [YourMessage] - [NewReply]');
            const [oldMsg, newMsg] = dipto.replace(/^edit\s*/, "").split(/\s*-\s*/);
            if (!oldMsg || !newMsg) return sendAndRegister(api, event, 'тЭМ | Invalid format!');
            const dA = (await axios.get(`${link}?edit=${encodeURIComponent(oldMsg)}&replace=${encodeURIComponent(newMsg)}&senderID=${uid}`)).data.message;
            return sendAndRegister(api, event, `тЬЕ Changed: ${dA}`);
        }

        if (args[0] === 'teach') {
            const type = args[1];
            const [input, replies] = dipto.replace(/^teach\s*(?:amar|react)?\s*/, "").split(/\s*-\s*/);
            if (!input || !replies) return sendAndRegister(api, event, 'тЭМ | Invalid format!');
            
            let url = `${link}?teach=${encodeURIComponent(input)}&reply=${encodeURIComponent(replies)}&senderID=${uid}&threadID=${event.threadID}`;
            if (type === 'amar') url += "&key=intro";
            if (type === 'react') url = `${link}?teach=${encodeURIComponent(input)}&react=${encodeURIComponent(replies)}`;

            const res = (await axios.get(url)).data;
            return sendAndRegister(api, event, `тЬЕ Replies added ${res.message}`);
        }

        const d = (await axios.get(`${link}?text=${encodeURIComponent(dipto)}&senderID=${uid}&font=1`)).data.reply;
        sendAndRegister(api, event, d, { apiUrl: link });

    } catch (e) {
        console.log(e);
        return sendAndRegister(api, event, "Check console for error");
    }
};

module.exports.onReply = async ({ api, event, Reply }) => {
    if ([api.getCurrentUserID()].includes(event.senderID)) return;
    try {
        if (event.type === "message_reply") {
            const a = (await axios.get(`${baseApiUrl()}/baby?text=${encodeURIComponent(event.body?.toLowerCase())}&senderID=${event.senderID}&font=1`)).data.reply;
            return sendAndRegister(api, event, a, { a });
        }
    } catch (err) {
        return sendAndRegister(api, event, `Error: ${err.message}`);
    }
};
